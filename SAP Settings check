<#
.SYNOPSIS
PSAppDeployToolkit - This script performs the installation or uninstallation of an application(s).

.DESCRIPTION
- The script is provided as a template to perform an install, uninstall, or repair of an application(s).
- The script either performs an "Install", "Uninstall", or "Repair" deployment type.
- The install deployment type is broken down into 3 main sections/phases: Pre-Install, Install, and Post-Install.

The script imports the PSAppDeployToolkit module which contains the logic and functions required to install or uninstall an application.

PSAppDeployToolkit is licensed under the GNU LGPLv3 License - (C) 2025 PSAppDeployToolkit Team (Sean Lillis, Dan Cunningham, Muhammad Mashwani, Mitch Richters, Dan Gough).

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the
Free Software Foundation, either version 3 of the License, or any later version. This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

.PARAMETER DeploymentType
The type of deployment to perform.

.PARAMETER DeployMode
Specifies whether the installation should be run in Interactive (shows dialogs), Silent (no dialogs), or NonInteractive (dialogs without prompts) mode.

NonInteractive mode is automatically set if it is detected that the process is not user interactive.

.PARAMETER AllowRebootPassThru
Allows the 3010 return code (requires restart) to be passed back to the parent process (e.g. SCCM) if detected from an installation. If 3010 is passed back to SCCM, a reboot prompt will be triggered.

.PARAMETER TerminalServerMode
Changes to "user install mode" and back to "user execute mode" for installing/uninstalling applications for Remote Desktop Session Hosts/Citrix servers.

.PARAMETER DisableLogging
Disables logging to file for the script.

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -DeployMode Silent

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -AllowRebootPassThru

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -DeploymentType Uninstall

.EXAMPLE
Invoke-AppDeployToolkit.exe -DeploymentType "Install" -DeployMode "Silent"

.INPUTS
None. You cannot pipe objects to this script.

.OUTPUTS
None. This script does not generate any output.

.NOTES
Toolkit Exit Code Ranges:
- 60000 - 68999: Reserved for built-in exit codes in Invoke-AppDeployToolkit.ps1, and Invoke-AppDeployToolkit.exe
- 69000 - 69999: Recommended for user customized exit codes in Invoke-AppDeployToolkit.ps1
- 70000 - 79999: Recommended for user customized exit codes in PSAppDeployToolkit.Extensions module.

.LINK
https://psappdeploytoolkit.com

#>

[CmdletBinding()]
param
(
    [Parameter(Mandatory = $false)]
    [ValidateSet('Install', 'Uninstall', 'Repair')]
    [PSDefaultValue(Help = 'Install', Value = 'Install')]
    [System.String]$DeploymentType,

    [Parameter(Mandatory = $false)]
    [ValidateSet('Interactive', 'Silent', 'NonInteractive')]
    [PSDefaultValue(Help = 'Interactive', Value = 'Interactive')]
    [System.String]$DeployMode,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$AllowRebootPassThru,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$TerminalServerMode,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$DisableLogging
)


##================================================
## MARK: Variables
##================================================

$adtSession = @{
    # App variables.
    AppVendor = ''
    AppName = ''
    AppVersion = ''
    AppArch = ''
    AppLang = 'EN'
    AppRevision = '01'
    AppSuccessExitCodes = @(0)
    AppRebootExitCodes = @(1641, 3010)
    AppScriptVersion = '1.0.0'
    AppScriptDate = '2000-12-31'
    AppScriptAuthor = '<author name>'

    # Install Titles (Only set here to override defaults set by the toolkit).
    InstallName = ''
    InstallTitle = ''

    # Script variables.
    DeployAppScriptFriendlyName = $MyInvocation.MyCommand.Name
    DeployAppScriptVersion = '4.0.6'
    DeployAppScriptParameters = $PSBoundParameters
}

function Install-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Install
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close Internet Explorer if required, allow up to 3 deferrals, verify there is enough disk space to complete the install, and persist the prompt.
    #Show-ADTInstallationWelcome -CloseProcesses iexplore -AllowDefer -DeferTimes 3 -CheckDiskSpace -PersistPrompt

    ## Show Progress Message (with the default message).
    Show-ADTInstallationProgress

    ## <Perform Pre-Installation tasks here>
    # Kill Processes
    $processes = @("NwSapSetupUserNotificationTool", "NwSapAutoWorkstationUpdateService", "saplogon", "sbus", "sbustrace")
    foreach ($process in $processes) {
        if (Get-Process -Name $process -ErrorAction SilentlyContinue) {
            Write-ADTLogEntry -Message "Stopping the process '$process'..." -Source $adtSession.InstallPhase
            Stop-Process -Name $process -Force -ErrorAction SilentlyContinue
            Write-ADTLogEntry -Message "'$process' process has been stopped." -Source $adtSession.InstallPhase
        } else {
            Write-ADTLogEntry -Message "'$process' is not running." -Source $adtSession.InstallPhase
        }
    }

    # File Operations for All User Profiles
    $excludeProfiles = @('Public', 'Default', 'Default User', 'All Users', 'LocalService', 'NetworkService', 'SYSTEM')
    $userProfileDirs = Get-ChildItem -Path "C:\Users" -Directory -ErrorAction SilentlyContinue | 
        Where-Object { 
            $excludeProfiles -notcontains $_.Name -and 
            (Test-Path -Path (Join-Path -Path $_.FullName -ChildPath "NTUSER.DAT") -ErrorAction SilentlyContinue)
        }
    $loggedInUsers = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty UserName | ForEach-Object { $_ -replace '.*\\', '' }

    foreach ($profileDir in $userProfileDirs) {
        if (-not $profileDir -or -not $profileDir.FullName) {
            continue
        }
        $userPath = $profileDir.FullName
        $userName = $profileDir.Name
        # Skip logged-in users
        if ($loggedInUsers -contains $userName) {
            continue
        }
        $sourcePath = Join-Path -Path $userPath -ChildPath "AppData\Roaming\SAP\Common"
        $backupPath = Join-Path -Path $userPath -ChildPath "AppData\Roaming\SAP\GUI_Backup"

        if (Test-Path -Path $sourcePath -ErrorAction SilentlyContinue) {
            try {
                # Create backup directory if it doesn't exist
                if (-not (Test-Path -Path $backupPath)) {
                    New-Item -Path $backupPath -ItemType Directory -Force -ErrorAction Stop | Out-Null
                }
                # Copy Common folder to GUI_Backup
                Copy-Item -Path $sourcePath -Destination $backupPath -Recurse -Force -ErrorAction Stop
                Write-ADTLogEntry -Message "Copied '$sourcePath' to '$backupPath' for user '$userName'." -Source $adtSession.InstallPhase
                # Delete original Common folder
                Remove-Item -Path $sourcePath -Recurse -Force -ErrorAction Stop
                Write-ADTLogEntry -Message "Deleted '$sourcePath' for user '$userName'." -Source $adtSession.InstallPhase
            }
            catch {
                Write-ADTLogEntry -Message "Failed to perform file operations for user '$userName': $_" -Source $adtSession.InstallPhase -Severity 3
                continue
            }
        }
    }

    ##================================================
    ## MARK: Install
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    <## Handle Zero-Config MSI installations.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
        if ($adtSession.DefaultMspFiles)
        {
            $adtSession.DefaultMspFiles | Start-ADTMsiProcess -Action Patch
        }
    }
    #>

    ## <Perform Installation tasks here>
    Start-ADTProcess -Filepath 'GUI800_10-80006342.EXE' -Argumentlist '/Silent'

    ##================================================
    ## MARK: Post-Install
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Installation tasks here>
    # Remove shortcut from All Users Desktop (if found)
    $DESKTOPICONPATH = "$envCommonDesktop\Google Chrome.lnk"
    If (Test-Path $DESKTOPICONPATH)
    {
        Remove-Item $DESKTOPICONPATH -Force
        Write-ADTLogEntry -Message "$DESKTOPICONPATH found.  Removing ..." -Source $adtSession.InstallPhase
    }

    ## User Profile Enumeration for File and Registry Operations
    foreach ($profileDir in $userProfileDirs) {
        if (-not $profileDir -or -not $profileDir.FullName) {
            continue
        }
        $userPath = $profileDir.FullName
        $userName = $profileDir.Name
        # Skip logged-in users
        if ($loggedInUsers -contains $userName) {
            continue
        }
        # Find matching SID
        $profile = $profileList | Where-Object { $_.ProfileImagePath -eq $userPath }
        if ($profile) {
            $rawSID = $profile.PSChildName
            # Validate SID format (should match S-1-5-...)
            if (-not $rawSID -or $rawSID -notmatch '^S-1-5-[\d-]+$') {
                continue
            }
            $userSID = $rawSID -replace '[^\w\-]', '' # Sanitize SID
            if (-not $userSID) {
                continue
            }

            ## File Operations
            $backupPath = Join-Path -Path $userPath -ChildPath "AppData\Roaming\SAP\GUI_Backup"
            $destinationPath = Join-Path -Path $userPath -ChildPath "AppData\Roaming\SAP\Common"

            if (Test-Path -Path $backupPath -ErrorAction SilentlyContinue) {
                try {
                    # Create destination Common folder if it doesn't exist
                    if (-not (Test-Path -Path $destinationPath)) {
                        New-Item -Path $destinationPath -ItemType Directory -Force -ErrorAction Stop | Out-Null
                    }
                    # Copy contents of GUI_Backup to Common
                    Copy-Item -Path "$backupPath\*" -Destination $destinationPath -Recurse -Force -ErrorAction Stop
                }
                catch {
                    # Continue to next profile on error
                    continue
                }
            }

            ## Registry Operations
            try {
                # Load user's registry hive with retry
                $hivePath = Join-Path -Path $userPath -ChildPath "NTUSER.DAT"
                if (Test-Path -Path $hivePath -ErrorAction SilentlyContinue) {
                    $tempHive = "HKU\$userSID"
                    if (-not $adtSession.InstallPhase) {
                        continue
                    }
                    $maxRetries = 3
                    $retryCount = 0
                    $hiveLoaded = $false

                    while (-not $hiveLoaded -and $retryCount -lt $maxRetries) {
                        $regLoadResult = reg load "$tempHive" $hivePath 2>&1
                        if ($LASTEXITCODE -eq 0) {
                            $hiveLoaded = $true
                        }
                        else {
                            $retryCount++
                            Start-Sleep -Seconds 2
                        }
                    }

                    if (-not $hiveLoaded) {
                        continue
                    }

                    # Grant full control to Administrators on the hive
                    try {
                        $regKey = [Microsoft.Win32.Registry]::Users.OpenSubKey($userSID, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)
                        $acl = $regKey.GetAccessControl()
                        $rule = New-Object System.Security.AccessControl.RegistryAccessRule (
                            "Administrators",
                            "FullControl",
                            "ContainerInherit",
                            "None",
                            "Allow"
                        )
                        $acl.SetAccessRule($rule)
                        $regKey.SetAccessControl($acl)
                        $regKey.Close()
                    }
                    catch {
                        # Continue on permission setting failure
                    }

                    # Registry Key Set 1 (HKCU)
                    $regKeys1 = @(
                        @{ Path = "$tempHive\SOFTWARE\SAP\General"; Name = "BrowserControl"; Type = "DWORD"; Value = 1 },
                        @{ Path = "$tempHive\SOFTWARE\SAP\General"; Name = "SAPDockAllowMoveSave"; Type = "DWORD"; Value = 0 },
                        @{ Path = "$tempHive\SOFTWARE\SAP\General"; Name = "SAPGUIControlPlugin"; Type = "DWORD"; Value = 0 },
                        @{ Path = "$tempHive\SOFTWARE\SAP\General"; Name = "Language"; Type = "String"; Value = "EN" }
                    )

                    foreach ($key in $regKeys1) {
                        $regPath = $key.Path -replace '^HKU\\', 'HKEY_USERS\' -replace '[^a-zA-Z0-9\\_-]', ''
                        $keyName = $key.Name -replace '[^a-zA-Z0-9_-]', ''
                        try {
                            reg add "$regPath" /f | Out-Null
                            if ($key.Type -eq "DWORD") {
                                reg add "$regPath" /v "$keyName" /t REG_DWORD /d $($key.Value) /f | Out-Null
                            }
                            else {
                                reg add "$regPath" /v "$keyName" /t REG_SZ /d "$($key.Value)" /f | Out-Null
                            }
                        }
                        catch {
                            continue
                        }
                    }

                    # Registry Key Set 2 (HKCU)
                    $regKeys2 = @(
                        @{ Path = "$tempHive\Software\SAP\SAPGUI Front\SAP Frontend Server\LocalData"; Name = "ImportedToSQLite"; Type = "DWORD"; Value = 1 },
                        @{ Path = "$tempHive\Software\SAP\SAPLogon\Options"; Name = "CoreLandscapeFileOnServer"; Type = "ExpandString"; Value = "https://PLACEHOLDER" },
                        @{ Path = "$tempHive\Software\SAP\SAPLogon\Options"; Name = "AllowCachingServerConfigFiles"; Type = "DWORD"; Value = 1 },
                        @{ Path = "$tempHive\Software\SAP\General\Appearance"; Name = "SelectedTheme"; Type = "DWORD"; Value = 1 },
                        @{ Path = "$tempHive\Software\SAP\General\Appearance"; Name = "SelectedFallbackTheme"; Type = "DWORD"; Value = 1 }
                    )

                    foreach ($key in $regKeys2) {
                        $regPath = $key.Path -replace '^HKU\\', 'HKEY_USERS\' -replace '[^a-zA-Z0-9\\_-]', ''
                        $keyName = $key.Name -replace '[^a-zA-Z0-9_-]', ''
                        try {
                            reg add "$regPath" /f | Out-Null
                            if ($key.Type -eq "DWORD") {
                                reg add "$regPath" /v "$keyName" /t REG_DWORD /d $($key.Value) /f | Out-Null
                            }
                            elseif ($key.Type -eq "ExpandString") {
                                reg add "$regPath" /v "$keyName" /t REG_EXPAND_SZ /d "$($key.Value)" /f | Out-Null
                            }
                        }
                        catch {
                            continue
                        }
                    }

                    # Unload registry hive
                    [gc]::Collect()
                    reg unload "$tempHive" | Out-Null
                }
            }
            catch {
                # Attempt to unload hive if it was loaded
                try {
                    if (Test-Path -Path "$tempHive") {
                        [gc]::Collect()
                        reg unload "$tempHive" | Out-Null
                    }
                }
                catch {
                    # Continue to next profile
                }
            }
        }

        # Create HKLM registry key
        try {
            $hklmPath = "HKEY_LOCAL_MACHINE\Software\Policies\SAP\SecureLogin"
            reg add "$hklmPath" /f | Out-Null
            reg add "$hklmPath" /v "EnableKerberosProfile" /t REG_DWORD /d 1 /f | Out-Null
        }
        catch {
            # Continue on error
        }
}

function Uninstall-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Uninstall
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close Internet Explorer with a 60 second countdown before automatically closing.
    #Show-ADTInstallationWelcome -CloseProcesses iexplore -CloseProcessesCountdown 60

    ## Show Progress Message (with the default message).
    Show-ADTInstallationProgress

    ## <Perform Pre-Uninstallation tasks here>
    $processes = @("NwSapSetupUserNotificationTool", "NwSapAutoWorkstationUpdateService", "saplogon", "sbus", "sbustrace")
    foreach ($process in $processes) {
        if (Get-Process -Name $process -ErrorAction SilentlyContinue) {
            Write-ADTLogEntry -Message "Stopping the process '$process'..." -Source $adtSession.InstallPhase
            Stop-Process -Name $process -Force -ErrorAction SilentlyContinue
            Write-ADTLogEntry -Message "'$process' process has been stopped." -Source $adtSession.InstallPhase
        } else {
            Write-ADTLogEntry -Message "'$process' is not running." -Source $adtSession.InstallPhase
        }
    }

    ##================================================
    ## MARK: Uninstall
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    <## Handle Zero-Config MSI uninstallations.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
    }
    #>

    ## <Perform Uninstallation tasks here>
    Start-ADTProcess -Filepath 'C:\Program Files (x86)\SAP\SapSetup\Setup\nwsapsetup.exe' -Argumentlist '/product="PdfPrintGui+SCRIPTED+SCE+SAPDTS+KW+GUIISHMED+JNet+CALSYNC+RFC64+SAPGUI+SAPBI+SLC" /TitleComponent:"SAPGUI" /IgnoreMissingProducts /uninstall /silent'

    ##================================================
    ## MARK: Post-Uninstallation
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Uninstallation tasks here>
}

function Repair-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Repair
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close Internet Explorer with a 60 second countdown before automatically closing.
    #Show-ADTInstallationWelcome -CloseProcesses iexplore -CloseProcessesCountdown 60

    ## Show Progress Message (with the default message).
    #Show-ADTInstallationProgress

    ## <Perform Pre-Repair tasks here>

    ##================================================
    ## MARK: Repair
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    <## Handle Zero-Config MSI repairs.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
    }
    #>

    ## <Perform Repair tasks here>

    ##================================================
    ## MARK: Post-Repair
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Repair tasks here>
}

##================================================
## MARK: Initialization
##================================================

# Set strict error handling across entire operation.
$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop
$ProgressPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
Set-StrictMode -Version 1

# Import the module and instantiate a new session.
try
{
    $moduleName = if ([System.IO.File]::Exists("$PSScriptRoot\PSAppDeployToolkit\PSAppDeployToolkit.psd1"))
    {
        Get-ChildItem -LiteralPath $PSScriptRoot\PSAppDeployToolkit -Recurse -File | Unblock-File -ErrorAction Ignore
        "$PSScriptRoot\PSAppDeployToolkit\PSAppDeployToolkit.psd1"
    }
    else
    {
        'PSAppDeployToolkit'
    }
    Import-Module -FullyQualifiedName @{ ModuleName = $moduleName; Guid = '8c3c366b-8606-4576-9f2d-4051144f7ca2'; ModuleVersion = '4.0.6' } -Force
    try
    {
        $iadtParams = Get-ADTBoundParametersAndDefaultValues -Invocation $MyInvocation
        $adtSession = Open-ADTSession -SessionState $ExecutionContext.SessionState @adtSession @iadtParams -PassThru
    }
    catch
    {
        Remove-Module -Name PSAppDeployToolkit* -Force
        throw
    }
}
catch
{
    $Host.UI.WriteErrorLine((Out-String -InputObject $_ -Width ([System.Int32]::MaxValue)))
    exit 60008
}

##================================================
## MARK: Invocation
##================================================

try
{
    Get-Item -Path $PSScriptRoot\PSAppDeployToolkit.* | & {
        process
        {
            Get-ChildItem -LiteralPath $_.FullName -Recurse -File | Unblock-File -ErrorAction Ignore
            Import-Module -Name $_.FullName -Force
        }
    }
    & "$($adtSession.DeploymentType)-ADTDeployment"
    Close-ADTSession
}
catch
{
    Write-ADTLogEntry -Message ($mainErrorMessage = Resolve-ADTErrorRecord -ErrorRecord $_) -Severity 3
    Show-ADTDialogBox -Text $mainErrorMessage -Icon Stop | Out-Null
    Close-ADTSession -ExitCode 60001
}
finally
{
    Remove-Module -Name PSAppDeployToolkit* -Force
}
}
