<#

.SYNOPSIS
PSAppDeployToolkit - Configures SAP settings for all user profiles.

.DESCRIPTION
- The script performs SAP configuration tasks for all user profiles, excluding system profiles.
- Tasks include copying and deleting the SAP Common folder and updating registry keys.
- The script uses PSAppDeployToolkit 4.0.6 for logging, user interaction, and deployment tasks.

PSAppDeployToolkit is licensed under the GNU LGPLv3 License - (C) 2025 PSAppDeployToolkit Team (Sean Lillis, Dan Cunningham, Muhammad Mashwani, Mitch Richters, Dan Gough).

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the
Free Software Foundation, either version 3 of the License, or any later version. This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

.PARAMETER DeploymentType
The type of deployment to perform.

.PARAMETER DeployMode
Specifies whether the installation should be run in Interactive (shows dialogs), Silent (no dialogs), or NonInteractive (dialogs without prompts) mode.

NonInteractive mode is automatically set if it is detected that the process is not user interactive.

.PARAMETER AllowRebootPassThru
Allows the 3010 return code (requires restart) to be passed back to the parent process (e.g. SCCM) if detected from an installation. If 3010 is passed back to SCCM, a reboot prompt will be triggered.

.PARAMETER TerminalServerMode
Changes to "user install mode" and back to "user execute mode" for installing/uninstalling applications for Remote Desktop Session Hosts/Citrix servers.

.PARAMETER DisableLogging
Disables logging to file for the script.

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -DeployMode Silent

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -AllowRebootPassThru

.EXAMPLE
powershell.exe -File Invoke-AppDeployToolkit.ps1 -DeploymentType Uninstall

.EXAMPLE
Invoke-AppDeployToolkit.exe -DeploymentType "Install" -DeployMode "Silent"

.INPUTS
None. You cannot pipe objects to this script.

.OUTPUTS
None. This script does not generate any output.

.NOTES
Toolkit Exit Code Ranges:
- 60000 - 68999: Reserved for built-in exit codes in Invoke-AppDeployToolkit.ps1, and Invoke-AppDeployToolkit.exe
- 69000 - 69999: Recommended for user customized exit codes in Invoke-AppDeployToolkit.ps1
- 70000 - 79999: Recommended for user customized exit codes in PSAppDeployToolkit.Extensions module.

.LINK
https://psappdeploytoolkit.com

#>

[CmdletBinding()]
param
(
    [Parameter(Mandatory = $false)]
    [ValidateSet('Install', 'Uninstall', 'Repair')]
    [PSDefaultValue(Help = 'Install', Value = 'Install')]
    [System.String]$DeploymentType,

    [Parameter(Mandatory = $false)]
    [ValidateSet('Interactive', 'Silent', 'NonInteractive')]
    [PSDefaultValue(Help = 'Interactive', Value = 'Interactive')]
    [System.String]$DeployMode,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$AllowRebootPassThru,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$TerminalServerMode,

    [Parameter(Mandatory = $false)]
    [System.Management.Automation.SwitchParameter]$DisableLogging
)


##================================================
## MARK: Variables
##================================================

$adtSession = @{
    # App variables.
    AppVendor = 'SAP'
    AppName = 'UserProfileConfig'
    AppVersion = '1.0'
    AppArch = ''
    AppLang = 'EN'
    AppRevision = '01'
    AppSuccessExitCodes = @(0)
    AppRebootExitCodes = @(1641, 3010)
    AppScriptVersion = '1.0.0'
    AppScriptDate = '2025-05-20'
    AppScriptAuthor = 'Grok'

    # Install Titles (Only set here to override defaults set by the toolkit).
    InstallName = ''
    InstallTitle = ''

    # Script variables.
    DeployAppScriptFriendlyName = $MyInvocation.MyCommand.Name
    DeployAppScriptVersion = '4.0.6'
    DeployAppScriptParameters = $PSBoundParameters
}

function Install-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Install
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close saplogon.exe if required, allow up to 3 deferrals, and persist the prompt.
    Show-ADTInstallationWelcome -CloseProcesses saplogon -AllowDefer -DeferTimes 3 -PersistPrompt

    ## Show Progress Message (with the default message).
    Show-ADTInstallationProgress -Message 'Preparing to configure SAP settings for user profiles...'

    ## <Perform Pre-Installation tasks here>
    Write-ADTLogEntry -Message "Starting SAP user profile configuration." -Severity 1


    ##================================================
    ## MARK: Install
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    ## Handle Zero-Config MSI installations.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
        if ($adtSession.DefaultMspFiles)
        {
            $adtSession.DefaultMspFiles | Start-ADTMsiProcess -Action Patch
        }
    }

    ## Perform Installation tasks here
    try {
        # Get all user profiles, excluding system profiles
        $userProfiles = Get-WmiObject -Class Win32_UserProfile | Where-Object {
            $_.Special -eq $false -and 
            $_.SID -notmatch "S-1-5-(18|19|20)" # Exclude SYSTEM, LOCAL SERVICE, NETWORK SERVICE
        }

        foreach ($profile in $userProfiles) {
            try {
                $sid = $profile.SID
                $localPath = $profile.LocalPath
                $userName = Split-Path $localPath -Leaf

                # File operations
                $sapCommonPath = Join-Path $localPath "AppData\Roaming\SAP\Common"
                $sapBackupPath = Join-Path $localPath "AppData\Roaming\SAP\GUI_Backup_Files"

                if (Test-Path $sapCommonPath) {
                    # Copy Common folder to GUI_Backup_Files
                    Copy-File -Path $sapCommonPath -Destination $sapBackupPath -Recurse -ContinueOnError $true
                    Write-ADTLogEntry -Message "Copied SAP Common folder to GUI_Backup_Files for user: $userName" -Severity 1
                    # Delete Common folder
                    Remove-Folder -Path $sapCommonPath -ContinueOnError $true
                    Write-ADTLogEntry -Message "Deleted SAP Common folder for user: $userName" -Severity 1
                }

                # Load user's registry hive
                $tempHive = "HKLM:\TempHive_$sid"
                $ntuserPath = Join-Path $localPath "NTUSER.DAT"

                if (Test-Path $ntuserPath) {
                    try {
                        # Load the user's registry hive
                        Execute-Process -Path "reg.exe" -Parameters "load HKLM\TempHive_$sid `"$ntuserPath`"" -WindowStyle Hidden
                        Write-ADTLogEntry -Message "Loaded registry hive for user: $userName" -Severity 1

                        # Registry changes for HKEY_CURRENT_USER\SOFTWARE\SAP\General
                        Set-RegistryKey -Key "$tempHive\SOFTWARE\SAP\General" -Name "BrowserControl" -Value 1 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\SOFTWARE\SAP\General" -Name "SAPDockAllowMoveSave" -Value 0 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\SOFTWARE\SAP\General" -Name "SAPGUIControlPlugin" -Value 0 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\SOFTWARE\SAP\General" -Name "Language" -Value "EN" -Type String -SID $sid

                        # Registry changes for HKEY_CURRENT_USER\Software\SAP\SAPGUI Front and SAPLogon
                        Set-RegistryKey -Key "$tempHive\Software\SAP\SAPGUI Front\SAP Frontend Server\LocalData" -Name "ImportedToSQLite" -Value 1 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\Software\SAP\SAPLogon\Options" -Name "LandscapeFileOnServer" -Value "https://PLACEHOLDER" -Type ExpandString -SID $sid
                        Set-RegistryKey -Key "$tempHive\Software\SAP\SAPLogon\Options" -Name "AllowCachingServerConfigFiles" -Value 1 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\Software\SAP\General\Appearance" -Name "SelectedTheme" -Value 1 -Type DWord -SID $sid
                        Set-RegistryKey -Key "$tempHive\Software\SAP\General\Appearance" -Name "SelectedFallbackTheme" -Value 1 -Type DWord -SID $sid

                        Write-ADTLogEntry -Message "Applied registry changes for user: $userName" -Severity 1
                    }
                    finally {
                        # Unload the registry hive
                        [gc]::Collect()
                        Execute-Process -Path "reg.exe" -Parameters "unload HKLM\TempHive_$sid" -WindowStyle Hidden
                        Write-ADTLogEntry -Message "Unloaded registry hive for user: $userName" -Severity 1
                    }
                }
            }
            catch {
                Write-ADTLogEntry -Message "Error processing profile for SID '$sid': $_" -Severity 2
            }
        }

        Write-ADTLogEntry -Message "SAP configuration completed for all user profiles." -Severity 1
    }
    catch {
        Write-ADTLogEntry -Message "An error occurred: $_" -Severity 3
        Show-ADTDialogBox -Text "An error occurred during SAP configuration. Contact your administrator." -Icon Stop | Out-Null
        Close-ADTSession -ExitCode 69001
    }

    ##================================================
    ## MARK: Post-Install
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Installation tasks here>
    Show-ADTInstallationPrompt -Message 'SAP user profile configuration completed successfully.' -ButtonRightText 'OK' -Icon Information -NoWait
}

function Uninstall-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Uninstall
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close saplogon.exe with a 60 second countdown before automatically closing.
    Show-ADTInstallationWelcome -CloseProcesses saplogon -CloseProcessesCountdown 60

    ## Show Progress Message (with the default message).
    Show-ADTInstallationProgress

    ## <Perform Pre-Uninstallation tasks here>
    Write-ADTLogEntry -Message "Uninstallation not implemented for SAP user profile configuration." -Severity 1


    ##================================================
    ## MARK: Uninstall
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    ## Handle Zero-Config MSI uninstallations.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
    }

    ## <Perform Uninstallation tasks here>
    Write-ADTLogEntry -Message "No uninstallation tasks defined as configuration changes are user-profile-specific." -Severity 1


    ##================================================
    ## MARK: Post-Uninstallation
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Uninstallation tasks here>
    Show-ADTInstallationPrompt -Message 'Uninstallation not applicable for SAP user profile configuration.' -ButtonRightText 'OK' -Icon Information -NoWait
}

function Repair-ADTDeployment
{
    ##================================================
    ## MARK: Pre-Repair
    ##================================================
    $adtSession.InstallPhase = "Pre-$($adtSession.DeploymentType)"

    ## Show Welcome Message, close saplogon.exe with a 60 second countdown before automatically closing.
    Show-ADTInstallationWelcome -CloseProcesses saplogon -CloseProcessesCountdown 60

    ## Show Progress Message (with the default message).
    Show-ADTInstallationProgress

    ## <Perform Pre-Repair tasks here>
    Write-ADTLogEntry -Message "Repair not implemented for SAP user profile configuration." -Severity 1


    ##================================================
    ## MARK: Repair
    ##================================================
    $adtSession.InstallPhase = $adtSession.DeploymentType

    ## Handle Zero-Config MSI repairs.
    if ($adtSession.UseDefaultMsi)
    {
        $ExecuteDefaultMSISplat = @{ Action = $adtSession.DeploymentType; FilePath = $adtSession.DefaultMsiFile }
        if ($adtSession.DefaultMstFile)
        {
            $ExecuteDefaultMSISplat.Add('Transform', $adtSession.DefaultMstFile)
        }
        Start-ADTMsiProcess @ExecuteDefaultMSISplat
    }

    ## <Perform Repair tasks here>
    Write-ADTLogEntry -Message "No repair tasks defined as configuration changes are user-profile-specific." -Severity 1


    ##================================================
    ## MARK: Post-Repair
    ##================================================
    $adtSession.InstallPhase = "Post-$($adtSession.DeploymentType)"

    ## <Perform Post-Repair tasks here>
    Show-ADTInstallationPrompt -Message 'Repair not applicable for SAP user profile configuration.' -ButtonRightText 'OK' -Icon Information -NoWait
}


##================================================
## MARK: Initialization
##================================================

# Set strict error handling across entire operation.
$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Stop
$ProgressPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
Set-StrictMode -Version 1

# Import the module and instantiate a new session.
try
{
    $moduleName = if ([System.IO.File]::Exists("$PSScriptRoot\..\..\..\PSAppDeployToolkit\PSAppDeployToolkit.psd1"))
    {
        Get-ChildItem -LiteralPath $PSScriptRoot\..\..\..\PSAppDeployToolkit -Recurse -File | Unblock-File -ErrorAction Ignore
        "$PSScriptRoot\..\..\..\PSAppDeployToolkit\PSAppDeployToolkit.psd1"
    }
    else
    {
        'PSAppDeployToolkit'
    }
    Import-Module -FullyQualifiedName @{ ModuleName = $moduleName; Guid = '8c3c366b-8606-4576-9f2d-4051144f7ca2'; ModuleVersion = '4.0.6' } -Force
    try
    {
        $iadtParams = Get-ADTBoundParametersAndDefaultValues -Invocation $MyInvocation
        $adtSession = Open-ADTSession -SessionState $ExecutionContext.SessionState @adtSession @iadtParams -PassThru
    }
    catch
    {
        Remove-Module -Name PSAppDeployToolkit* -Force
        throw
    }
}
catch
{
    $Host.UI.WriteErrorLine((Out-String -InputObject $_ -Width ([System.Int32]::MaxValue)))
    exit 60008
}


##================================================
## MARK: Invocation
##================================================

try
{
    Get-Item -Path $PSScriptRoot\PSAppDeployToolkit.* | & {
        process
        {
            Get-ChildItem -LiteralPath $_.FullName -Recurse -File | Unblock-File -ErrorAction Ignore
            Import-Module -Name $_.FullName -Force
        }
    }
    & "$($adtSession.DeploymentType)-ADTDeployment"
    Close-ADTSession
}
catch
{
    Write-ADTLogEntry -Message ($mainErrorMessage = Resolve-ADTErrorRecord -ErrorRecord $_) -Severity 3
    Show-ADTDialogBox -Text $mainErrorMessage -Icon Stop | Out-Null
    Close-ADTSession -ExitCode 60001
}
finally
{
    Remove-Module -Name PSAppDeployToolkit* -Force
}
