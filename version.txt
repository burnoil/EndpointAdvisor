# DriverUpdate.ps1
# Log file path
$logPath = "C:\Windows\mitll\Logs\MS_Update.txt"

# Function to log messages
function Write-UpdateLog {
    param([string]$Message)
    $timestamp = Get-Date -Format "MM/dd/yyyy HH:mm:ss"
    "$timestamp - $Message" | Out-File -Append -FilePath $logPath
}

Write-UpdateLog "===== Driver Update Started ====="

# Set registry for driver updates
Write-UpdateLog "Setting registry for driver updates..."
Set-itemproperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name SetPolicyDrivenUpdateSourceForDriverUpdates -Value 0 -ErrorAction SilentlyContinue

# Install PSWindowsUpdate module if not present
Write-UpdateLog "Checking for PSWindowsUpdate module..."
if (-not (Get-Module -ListAvailable -Name PSWindowsUpdate)) {
    Write-UpdateLog "Installing PSWindowsUpdate module..."
    try {
        Install-Module -Name PSWindowsUpdate -Force -ErrorAction Stop
        Write-UpdateLog "PSWindowsUpdate module installed successfully."
    } catch {
        Write-UpdateLog "ERROR: Failed to install PSWindowsUpdate - $($_.Exception.Message)"
        exit 1
    }
}

# Import the module
Write-UpdateLog "Importing PSWindowsUpdate module..."
try {
    Import-Module PSWindowsUpdate -Force -ErrorAction Stop
    Write-UpdateLog "PSWindowsUpdate module imported successfully."
} catch {
    Write-UpdateLog "ERROR: Failed to import PSWindowsUpdate - $($_.Exception.Message)"
    exit 1
}

# Run Windows Update for drivers
Write-UpdateLog "Checking for driver updates..."
try {
    Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -IgnoreReboot | Out-File -Append -FilePath $logPath
    Write-UpdateLog "Driver update check/install completed."
} catch {
    Write-UpdateLog "ERROR: Failed to install updates - $($_.Exception.Message)"
}

# Reset registry
Write-UpdateLog "Resetting registry..."
Set-itemproperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name SetPolicyDrivenUpdateSourceForDriverUpdates -Value 1 -ErrorAction SilentlyContinue

# Check BitLocker and suspend if needed
Write-UpdateLog "Checking BitLocker status..."
try {
    $bitlockerstatus = get-bitlockervolume -mountpoint "c:"
    if ($bitlockerstatus.ProtectionStatus -eq 'On') {
        Write-UpdateLog "BitLocker is enabled, suspending for next reboot..."
        Suspend-BitLocker -MountPoint "C:" -RebootCount 1
        Write-UpdateLog "BitLocker suspended successfully."
    } else {
        Write-UpdateLog "BitLocker is not enabled."
    }
} catch {
    Write-UpdateLog "ERROR: BitLocker check failed - $($_.Exception.Message)"
}

Write-UpdateLog "===== Driver Update Completed ====="


action uses wow64 redirection {not x64 of operating system}
// 1. Ensure the target folder exists
folder create "C:\Program Files\LLEA"
waithidden cmd.exe /c icacls "C:\Program Files\LLEA" /grant "Users":(OI)(CI)F /t

// 2. Build a pure-batch downloader using certutil
delete __createfile
createfile until END_OF_BATCH
@echo off
REM â€” download the signed scripts and icons
certutil -urlcache -f https://raw.llcad-github.llan.ll.mit.edu/EndpointEngineering/EndpointAdvisor/main/LLEA.ps1 "C:\Program Files\LLEA\LLEA.ps1"
if %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%
certutil -urlcache -f https://raw.llcad-github.llan.ll.mit.edu/EndpointEngineering/EndpointAdvisor/main/DriverUpdate.ps1 "C:\Program Files\LLEA\DriverUpdate.ps1"
if %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%
certutil -urlcache -f https://raw.llcad-github.llan.ll.mit.edu/EndpointEngineering/EndpointAdvisor/main/LL_LOGO.ico "C:\Program Files\LLEA\LL_LOGO.ico"
if %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%
certutil -urlcache -f https://raw.llcad-github.llan.ll.mit.edu/EndpointEngineering/EndpointAdvisor/main/LL_LOGO_MSG.ico "C:\Program Files\LLEA\LL_LOGO_MSG.ico"
exit /b 0
END_OF_BATCH

// 3. Drop the batch into place
copy __createfile "C:\Program Files\LLEA\download_LLEA.bat"

// 4. Run it as the current user, hidden
override wait
hidden=true
wait cmd.exe /C "C:\Program Files\LLEA\download_LLEA.bat"

// 5. (Optional) Clean up the batch once successful
delete "C:\Program Files\LLEA\download_LLEA.bat"

// 5a. Ensure log directory exists
folder create "C:\Windows\mitll\Logs"

// 5b. Create scheduled task using PowerShell
delete __createfile
createfile until END_OF_TASK_CREATION
$taskName = "MIT_LL_Driver_Update"
$taskDescription = "Monthly Windows driver updates via Windows Update"
$scriptPath = "C:\Program Files\LLEA\DriverUpdate.ps1"
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File `"$scriptPath`""
$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -ExecutionTimeLimit (New-TimeSpan -Hours 2)
Register-ScheduledTask -TaskName $taskName -Description $taskDescription -Action $action -Principal $principal -Settings $settings -Force
Write-Output "Scheduled task created successfully."
END_OF_TASK_CREATION

move __createfile "C:\Program Files\LLEA\CreateTask.ps1"

override wait
hidden=true
wait powershell.exe -ExecutionPolicy Bypass -File "C:\Program Files\LLEA\CreateTask.ps1"

delete "C:\Program Files\LLEA\CreateTask.ps1"

// 6. Register per machine Run key (hidden PowerShell)
override wait
hidden=true
wait reg add "HKLM\Software\Microsoft\Windows\CurrentVersion\Run" /v "LLEA" /t REG_SZ /d "\"C:\Windows\System32\conhost.exe\" --headless \"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe\" -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File \"C:\Program Files\LLEA\LLEA.ps1\" -RunMode LLEA\"" /f

// 7. Immediately invoke the (signed) script once
override wait
hidden=true
runas=currentuser  
wait cmd.exe /C start "" /b powershell.exe -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File "C:\Program Files\LLEA\LLEA.ps1" -RunMode LLEA
